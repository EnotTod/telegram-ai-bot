import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.strategy import FSMStrategy
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram import Dispatcher
import asyncio
import json
import random

# Telegram Bot Token (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π)
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

# ID –≥—Ä—É–ø–ø
GROUPS = {
    "main": "@hYIBrs0vnYw5MWI6",
    "active": "@7tYJXjHi4Cs0Mjli",
    "mentors": "@CsChNc61Ct9mNjdi",
    "vip": "@AV86AOkbLlRiMTAy"
}

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = [123456789, 987654321]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É)
try:
    with open("user_scores.json", "r") as file:
        user_scores = json.load(file)
except FileNotFoundError:
    user_scores = {}

# –ü–æ—Ä–æ–≥ –±–∞–ª–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
LEVELS = {
    "Practitioner": 200,
    "Guide": 500,
    "Mentor": 1000,
    "Guardian": 2000
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
async def add_points(user_id, points):
    user_id = str(user_id)
    if user_id not in user_scores:
        user_scores[user_id] = {"points": 0, "level": "Seeker", "challenges": 0}
    user_scores[user_id]["points"] += points
    await check_level_up(user_id)
    save_data()

# –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤
async def remove_points(user_id, points):
    user_id = str(user_id)
    if user_id in user_scores:
        user_scores[user_id]["points"] = max(0, user_scores[user_id]["points"] - points)
        save_data()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async def check_level_up(user_id):
    points = user_scores[user_id]["points"]
    current_level = user_scores[user_id]["level"]
    for level, required_points in LEVELS.items():
        if points >= required_points and current_level != level:
            user_scores[user_id]["level"] = level
            await bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è **{level}**!")
            await add_to_group(user_id, level)
            break

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open("user_scores.json", "w") as file:
        json.dump(user_scores, file)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã
async def add_to_group(user_id, level):
    if level == "Practitioner":
        await bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {GROUPS['active']}")
    elif level == "Mentor":
        await bot.send_message(user_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤: {GROUPS['mentors']}")
    elif level == "Guardian":
        await bot.send_message(user_id, f"–í—ã —Å—Ç–∞–ª–∏ –•—Ä–∞–Ω–∏—Ç–µ–ª–µ–º! –î–æ—Å—Ç—É–ø –≤ VIP-–∫–ª—É–±: {GROUPS['vip']}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
@dp.message_handler(commands=["add_points"], is_chat_admin=True)
async def admin_add_points(message: types.Message):
    if message.from_user.id in ADMINS:
        args = message.text.split()
        if len(args) == 3 and args[1].isdigit() and args[2].isdigit():
            user_id = args[1]
            points = int(args[2])
            await add_points(user_id, points)
            await message.reply(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        else:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_points <user_id> <–±–∞–ª–ª—ã>")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —Å–Ω—è—Ç–∏–µ –±–∞–ª–ª–æ–≤
@dp.message_handler(commands=["remove_points"], is_chat_admin=True)
async def admin_remove_points(message: types.Message):
    if message.from_user.id in ADMINS:
        args = message.text.split()
        if len(args) == 3 and args[1].isdigit() and args[2].isdigit():
            user_id = args[1]
            points = int(args[2])
            await remove_points(user_id, points)
            await message.reply(f"‚ùå –°–Ω—è—Ç–æ {points} –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        else:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remove_points <user_id> <–±–∞–ª–ª—ã>")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
@dp.message_handler(commands=["status"])
async def user_status(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in user_scores:
        points = user_scores[user_id]["points"]
        current_level = user_scores[user_id]["level"]
        next_level = None
        points_needed = None
        for level, required_points in LEVELS.items():
            if required_points > points:
                next_level = level
                points_needed = required_points - points
                break
        if next_level:
            await message.reply(f"üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level} ({points} –±–∞–ª–ª–æ–≤)\n–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {next_level} —á–µ—Ä–µ–∑ {points_needed} –±–∞–ª–ª–æ–≤.")
        else:
            await message.reply(f"üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {current_level} ({points} –±–∞–ª–ª–æ–≤). –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
    else:
        await message.reply("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∞–ª–ª–æ–≤. –ù–∞—á–Ω–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
